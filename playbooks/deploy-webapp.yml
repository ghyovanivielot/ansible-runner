---
- name: Deploy Web Application to Windows Servers
  hosts: windows
  gather_facts: yes
  vars:
    rollback_enabled: true
    max_retries: 3
  
  pre_tasks:
    - name: Verify prerequisites
      block:
        - name: Check if server is reachable
          win_ping:
          
        - name: Verify IIS is installed
          win_feature:
            name: IIS-WebServerRole
            state: present
          register: iis_check
          
        - name: Fail if IIS not available
          fail:
            msg: "IIS is not installed on {{ inventory_hostname }}"
          when: iis_check.changed
          
      rescue:
        - name: Log prerequisite failure
          debug:
            msg: "Prerequisites failed on {{ inventory_hostname }}"
        - fail:
            msg: "Cannot proceed with deployment"

  tasks:
    - name: Application Deployment
      block:
        # Backup existing application
        - name: Create backup directory
          win_file:
            path: "C:\\Backups\\{{ app_name }}\\{{ ansible_date_time.date }}"
            state: directory
          when: rollback_enabled
          
        - name: Backup current application
          win_copy:
            src: "{{ app_path }}\\"
            dest: "C:\\Backups\\{{ app_name }}\\{{ ansible_date_time.date }}\\"
            remote_src: yes
          when: rollback_enabled
          ignore_errors: yes
          
        # Stop services before deployment
        - name: Stop application pool
          win_iis_webapppool:
            name: "{{ app_pool_name }}"
            state: stopped
          ignore_errors: yes
          
        # Create service account
        - name: Create service account
          win_user:
            name: "{{ service_account }}"
            password: "{{ service_password }}"
            state: present
            groups:
              - IIS_IUSRS
            password_never_expires: yes
          no_log: true
          
        # Deploy application files
        - name: Create application directory
          win_file:
            path: "{{ app_path }}"
            state: directory
            
        - name: Deploy web.config
          win_template:
            src: web.config.j2
            dest: "{{ app_path }}\\web.config"
          notify: restart_app_pool
          
        - name: Deploy application files
          win_copy:
            content: |
              <!DOCTYPE html>
              <html>
              <head><title>{{ app_name }} v{{ app_version }}</title></head>
              <body>
                <h1>{{ app_name }} - {{ environment | upper }}</h1>
                <p>Version: {{ app_version }}</p>
                <p>Server: {{ inventory_hostname }}</p>
                <p>Deployed: {{ ansible_date_time.iso8601 }}</p>
              </body>
              </html>
            dest: "{{ app_path }}\\index.html"
            
        # Configure IIS
        - name: Create application pool
          win_iis_webapppool:
            name: "{{ app_pool_name }}"
            state: present
            attributes:
              processModel.identityType: SpecificUser
              processModel.userName: "{{ service_account }}"
              processModel.password: "{{ service_password }}"
              recycling.periodicRestart.time: "01:00:00"
          no_log: true
          
        - name: Create IIS website
          win_iis_website:
            name: "{{ app_name }}"
            state: started
            port: "{{ app_port }}"
            physical_path: "{{ app_path }}"
            application_pool: "{{ app_pool_name }}"
            
        # Configure firewall
        - name: Open application port
          win_firewall_rule:
            name: "{{ app_name }}-HTTP"
            localport: "{{ app_port }}"
            action: allow
            direction: in
            protocol: tcp
            state: present
            
        # Health check
        - name: Wait for application to start
          win_uri:
            url: "http://localhost:{{ app_port }}"
            method: GET
          register: health_check
          retries: "{{ max_retries }}"
          delay: 10
          until: health_check.status_code == 200
          
      rescue:
        - name: Log deployment failure
          debug:
            msg: "Deployment failed on {{ inventory_hostname }}: {{ ansible_failed_result.msg }}"
            
        - name: Rollback application
          block:
            - name: Stop failed application pool
              win_iis_webapppool:
                name: "{{ app_pool_name }}"
                state: stopped
              ignore_errors: yes
              
            - name: Restore from backup
              win_copy:
                src: "C:\\Backups\\{{ app_name }}\\{{ ansible_date_time.date }}\\"
                dest: "{{ app_path }}\\"
                remote_src: yes
              when: rollback_enabled
              
            - name: Start application pool
              win_iis_webapppool:
                name: "{{ app_pool_name }}"
                state: started
              ignore_errors: yes
              
          when: rollback_enabled
          
        - fail:
            msg: "Deployment failed and rollback completed"
            
      always:
        - name: Log deployment status
          win_eventlog:
            log: Application
            source: "{{ app_name }}"
            event_id: 1001
            message: "Deployment {{ 'completed' if health_check.status_code == 200 else 'failed' }} for {{ app_name }} v{{ app_version }}"
            category: 1
            type: "{{ 'Information' if health_check.status_code == 200 else 'Error' }}"

  handlers:
    - name: restart_app_pool
      win_iis_webapppool:
        name: "{{ app_pool_name }}"
        state: restarted
        
  post_tasks:
    - name: Generate deployment report
      debug:
        msg: |
          Deployment Summary:
          - Application: {{ app_name }} v{{ app_version }}
          - Server: {{ inventory_hostname }}
          - Status: {{ 'SUCCESS' if health_check.status_code == 200 else 'FAILED' }}
          - URL: http://{{ inventory_hostname }}:{{ app_port }}
          - Timestamp: {{ ansible_date_time.iso8601 }}
